var searchIndex = {};
searchIndex['bignum'] = {"items":[[0,"","bignum","",null,null],[3,"BigNum","","BigNum is designed to wrap a simple struct containing\na vector and offer the user to create these objects\njust as they would a standard type, but `BigNum` allows\noperations on an arbitrary size and is not limited to a \nlimit.",null,null],[0,"error","","",null,null],[3,"Error","bignum::error","The Struct returned in `Result` when an Error is encountered,\nlikely in from_str when a non-numeric is found or if an empty\nstring is passed. Contains the *type* of error, and the *cause*",null,null],[4,"ErrorType","","Enum type to specify *what* error happened, is used as a\nmember type in `Error`",null,null],[13,"Empty","","",0,null],[13,"NonNumeric","","",0,null],[13,"UnsignedOverflow","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"errortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[{"name":"error"},{"name":"errortype"},{"name":"s"}],"output":{"name":"error"}}],[0,"inits","bignum","",null,null],[8,"Zero","bignum::inits","A Zero value representation trait",null,null],[10,"zero","","",2,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[8,"One","","A *One* value representation trait",null,null],[10,"one","","",3,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[0,"arithmatic","bignum","",null,null],[5,"vector_add","bignum::arithmatic","Function that takes two vectors, each representing some atribtrary\nunsigned values (e.g. `[1,2,3] = 123u32`), and return a result\nrepresenting the addition between the two *numbers*.",null,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"vector_sub","","Function that takes two vectors, each representing some arbitrary unsigned\nvalues (e.g. `[1,1,1] = 111u32`), and return a result representing the \nsubtraction between the two *numbers*. Returns a `Result` as some subtraction\nmay result in an overflow, how the error is handled is up to the caller",null,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fmt","bignum","",4,{"inputs":[{"name":"bignum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"bignum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"bool"}}],[11,"zero","","",4,{"inputs":[{"name":"bignum"}],"output":{"name":"bignum"}}],[11,"one","","",4,{"inputs":[{"name":"bignum"}],"output":{"name":"bignum"}}],[11,"from_str","","",4,{"inputs":[{"name":"bignum"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_u32","","Create a new `BigNum` object from a u32 value, useful to setting\nthe initial value of a BigNum object that lies inside the range of\na u32 value.",4,{"inputs":[{"name":"bignum"},{"name":"u32"}],"output":{"name":"bignum"}}],[11,"from_vec","","Create a new `BigNum` object from a vector of u32 values",4,{"inputs":[{"name":"bignum"},{"name":"vec"}],"output":{"name":"bignum"}}],[11,"new","","Contructs a new `BigNum` object from an existing or passed u32,\nuseful for setting initial values such as zero, one or any other.",4,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"bignum"}}],[11,"to_u32","","",4,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}]],"paths":[[4,"ErrorType"],[3,"Error"],[8,"Zero"],[8,"One"],[3,"BigNum"]]};
initSearch(searchIndex);
